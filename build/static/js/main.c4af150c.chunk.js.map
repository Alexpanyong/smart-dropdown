{"version":3,"sources":["components/Dropdown/view/DropdownView.js","components/Dropdown/Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["DropdownView","userRole","countryList","countriesToShow","filteredCountryList","handleSelectCountry","handleClearCountry","selectedCountry","toggleDropdownList","openDropdown","handleShowAllCountries","handleSearchChange","wordToSearch","handleAddSelectCountry","useEffect","isEmpty","console","log","className","onClick","id","placeholder","onChange","map","item","key","value","country","length","Dropdown","howManyCountriesToShowSetting","getResult","useState","countryDataSet","setCountryDataSet","setCountryList","setSelectedCountry","setOpenDropdown","numberOfCountriesToShow","setNumberOfCountriesToShow","setCountriesToShow","setWordToSearch","setFilteredCountryList","handleSetCountryToShow","useCallback","_countriesToShow","filter","indexOf","axios","get","then","res","data","catch","err","countries","_countryList","Object","entries","forEach","push","toLowerCase","_country","e","target","innerHTML","Date","now","toString","region","App","setUserRole","setHowManyCountriesToShowSetting","countryPicked","setCountryPicked","name","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c4af150c.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport \"./DropdownView.css\";\n\nconst DropdownView = ({ userRole, countryList, countriesToShow, filteredCountryList, handleSelectCountry, handleClearCountry, selectedCountry, toggleDropdownList, openDropdown, handleShowAllCountries, handleSearchChange, wordToSearch, handleAddSelectCountry }) => {\n  useEffect(() => {\n    if (!countryList || isEmpty(countryList)) return;\n      console.log(\"View -- countryList\", countryList);\n    return () => {}\n  }, [countryList])\n\n  useEffect(() => {\n    if (!countriesToShow || isEmpty(countriesToShow)) return;\n    console.log(\"View -- countriesToShow\", countriesToShow);\n    return () => {}\n  }, [countriesToShow])\n\n  useEffect(() => {\n    if (!selectedCountry) return;\n      console.log(\"View -- selectedCountry:\", selectedCountry);\n    return () => {}\n  }, [selectedCountry])\n\n  useEffect(() => {\n    // if (!filteredCountryList || isEmpty(filteredCountryList)) return;\n      console.log(\"View -- filteredCountryList:\", filteredCountryList);\n    return () => {}\n  }, [filteredCountryList])\n\n  return (\n    <div>\n      <div className=\"dropdownWrap\">\n        <div className=\"inputBoxWrap\" onClick={toggleDropdownList}>\n          <div className={`inputBox ${selectedCountry ? \"\" : \"placeholder\"}`}>{selectedCountry ? selectedCountry : \"Select a location...\"}</div>\n          <div className=\"dropdownButtonWrap\">\n            <span id=\"dropdownButton\">\n              <div className={`iconArrowWrap ${openDropdown ? \"dropdownOpened\" : \"\"}`}>\n                <div className=\"iconArrow\" id=\"leftPart\"></div>\n                <div className=\"iconArrow\" id=\"rightPart\"></div>\n              </div>\n              \n            </span>\n          </div>\n        </div>\n        \n        {openDropdown && <div className=\"countryListWrap\">\n          <div className=\"searchBoxWrap\">\n            <input className=\"searchBox\" placeholder=\"Search...\" onChange={handleSearchChange}></input>\n            {isEmpty(filteredCountryList) && wordToSearch !== \"\" && <div className=\"notFoundInfoWrap\">\n              <div className={`notFoundInfo ${userRole !== \"admin\" ? \"fullWidth\" : \"\"}`}>{`\"${wordToSearch}\" not found`}</div>\n              {userRole === \"admin\" && <button className=\"addSelectButton\" onClick={() => handleAddSelectCountry(wordToSearch)}>{`Add & Select`}</button>}\n            </div>}\n          </div>\n          {(wordToSearch === \"\" && !isEmpty(countriesToShow)) && <ul>\n            <li onClick={handleClearCountry}>------</li>\n            {countriesToShow.map(item => <li key={item.id} value={item.country} onClick={handleSelectCountry}>{item.country}</li>)}\n            {countriesToShow.length !== countryList.length && <li className=\"showMoreButton\" onClick={handleShowAllCountries}>{`${countryList.length - countriesToShow.length} more...`}</li>}\n          </ul>}\n          {wordToSearch !== \"\" && <ul>\n            <li onClick={handleClearCountry}>--- Reset ---</li>\n            {filteredCountryList.map(item => <li key={item.id} value={item.country} onClick={handleSelectCountry}>{item.country}</li>)}\n          </ul>}\n        </div>}\n      </div>\n    </div>\n  )\n}\n\nexport default DropdownView;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { isEmpty } from \"lodash\";\nimport DropdownView from \"./view/DropdownView\";\nimport countries from \"../../data/countries.json\";\nimport \"./Dropdown.css\";\n\nconst Dropdown = ({ userRole, howManyCountriesToShowSetting, getResult }) => {\n  const countryListApi = \"https://api.first.org/data/v1/countries\";\n\n  const [countryDataSet, setCountryDataSet] = useState();\n  const [countryList, setCountryList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [openDropdown, setOpenDropdown] = useState(false);\n  const [numberOfCountriesToShow, setNumberOfCountriesToShow] = useState(5);\n  const [countriesToShow, setCountriesToShow] = useState([]);\n  const [wordToSearch, setWordToSearch] = useState(\"\");\n  const [filteredCountryList, setFilteredCountryList] = useState([]);\n\n  const fetchCountryData = () => {\n    axios.get(countryListApi)\n      .then(res => setCountryDataSet(res.data))\n      .catch(err => {\n        console.log(\"Fetch data failed, use local sample data:\", err);\n        setCountryDataSet(countries);\n      });\n  };\n\n  const handleSelectCountry = (e) => {\n    setSelectedCountry(e.target.innerHTML);\n    toggleDropdownList();\n  };\n\n  const handleSetCountryToShow = useCallback(\n    () => {\n      if (numberOfCountriesToShow < countryList.length) {\n        const _countriesToShow = countryList.filter(country => countryList.indexOf(country) < numberOfCountriesToShow);\n        setCountriesToShow(_countriesToShow);\n      } else {\n        setCountriesToShow(countryList);\n      }\n    },\n    [countryList, numberOfCountriesToShow]\n  );\n\n  const handleClearCountry = () => {\n    setSelectedCountry(null);\n    setWordToSearch(\"\");\n    toggleDropdownList();\n  };\n\n  const toggleDropdownList = () => {\n    setOpenDropdown(!openDropdown);\n  };\n\n  const handleShowAllCountries = () => {\n    setNumberOfCountriesToShow(countryList.length);\n  };\n\n  const handleSearchChange = (e) => {\n    setWordToSearch(e.target.value);\n  };\n\n  const handleAddSelectCountry = (country) => {\n    setCountryList([{id: Date.now().toString(), country, region: \"\"}, ...countryList]);\n    setSelectedCountry(country);\n    setWordToSearch(\"\");\n    toggleDropdownList();\n  }\n\n  useEffect(() => {\n    fetchCountryData();\n    return () => {}\n  }, [])\n\n  useEffect(() => {\n    setNumberOfCountriesToShow(howManyCountriesToShowSetting);\n    return () => {}\n  }, [howManyCountriesToShowSetting])\n\n  useEffect(() => {\n    if (!countryDataSet) return;\n    if (countryDataSet.data) {\n      let _countryList = [];\n      const _arr = Object.entries(countryDataSet.data);\n      _arr.forEach(([key, value]) => {\n        _countryList.push({id: key, ...value});\n      });\n      setCountryList(_countryList);\n    }\n    return () => {}\n  }, [countryDataSet])\n\n  useEffect(() => {\n    if (!countryList || isEmpty(countryList)) return;\n      handleSetCountryToShow();\n    return () => {}\n  }, [countryList, handleSetCountryToShow])\n\n  useEffect(() => {\n      setFilteredCountryList(countryList.filter(country => country.country.toLowerCase().indexOf(wordToSearch.toLowerCase()) > -1));\n    return () => {}\n  }, [countryList, wordToSearch])\n\n  useEffect(() => {\n    if (selectedCountry) {\n      const _country = countryList.filter(item => item.country === selectedCountry);\n      getResult(_country);\n    } else {\n      getResult(null);\n    }\n    return () => {}\n  }, [selectedCountry])\n\n  return (\n    <div>\n      <DropdownView \n        userRole={userRole}\n        countryList={countryList}\n        countriesToShow={countriesToShow}\n        filteredCountryList={filteredCountryList}\n        handleSelectCountry={handleSelectCountry}\n        handleClearCountry={handleClearCountry}\n        selectedCountry={selectedCountry}\n        toggleDropdownList={toggleDropdownList}\n        openDropdown={openDropdown}\n        handleShowAllCountries={handleShowAllCountries}\n        handleSearchChange={handleSearchChange}\n        wordToSearch={wordToSearch}\n        handleAddSelectCountry={handleAddSelectCountry}\n      />\n    </div>\n  )\n}\n\nexport default Dropdown;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Dropdown from \"./components/Dropdown/Dropdown\";\n\nfunction App() {\n  const [userRole, setUserRole] = useState(\"admin\");\n  const [howManyCountriesToShowSetting, setHowManyCountriesToShowSetting] = useState(5);\n  const [countryPicked, setCountryPicked] = useState(null);\n\n  const handleLoginSetting = (e) => {\n    setUserRole(e.target.value);\n  };\n\n  const handleNumOfCountriesToShowSetting = (e) => {\n    setHowManyCountriesToShowSetting(e.target.value);\n  };\n\n  const getResult = (country = null) => {\n    if (country) {\n      setCountryPicked(country);\n    } else {\n      setCountryPicked(null);\n    }\n  };\n\n  useEffect(() => {\n    if (!howManyCountriesToShowSetting) return;\n      console.log(howManyCountriesToShowSetting);\n    return () => {}\n  }, [howManyCountriesToShowSetting])\n\n  useEffect(() => {\n      console.log(\"countryPicked:\", countryPicked);\n    return () => {}\n  }, [countryPicked])\n\n  return (\n    <div className=\"App\">\n      <div className=\"settingsWrap\">\n        <div className=\"userRole\">\n          <label>Login as </label>\n          <select name=\"userRole\" id=\"userRoleSetting\" onChange={handleLoginSetting}>\n            <option value=\"admin\">Admin</option>\n            <option value=\"user\">User</option>\n          </select>\n        </div>\n        <div className=\"numOfCountriesToShow\">\n          <label>Number of countries to show </label>\n          <input id=\"numOfCountriesToShowSetting\" defaultValue=\"5\" onChange={handleNumOfCountriesToShowSetting}></input>\n        </div>\n      </div>\n      <Dropdown userRole={userRole} howManyCountriesToShowSetting={howManyCountriesToShowSetting} getResult={getResult} />\n      {countryPicked && <div className=\"resultPanelWrap\">\n        <div className=\"resultPanel\">\n          <div className=\"resultId\">Id: {countryPicked[0].id}</div>\n          <div className=\"resultCountry\">Country: {countryPicked[0].country}</div>\n          <div className=\"resultRegion\">Region: {countryPicked[0].region}</div>\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}